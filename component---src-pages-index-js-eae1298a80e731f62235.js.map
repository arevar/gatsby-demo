{"version":3,"sources":["webpack:///./src/pages/components/Header.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["TitleAndDescription","data","title","site","siteMetadata","description","style","display","flexDirection","alignItems","fontFamily","marginBottom","marginTop","opacity","Header","query","render","Layout","edges","allMarkdownRemark","console","log","map","edg","frontmatter","node","key","path","to","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","finalData","Fragment","StaticQuery","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"qJAGMA,EAAsB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACpBC,EAAQD,EAAKE,KAAKC,aAAaF,MAC/BG,EAAcJ,EAAKE,KAAKC,aAAaC,YAE3C,OACI,yBAAKC,MAAO,CACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,WAAY,WAEZ,wBAAIJ,MAAO,CAACK,aAAc,IAAMT,GAChC,uBAAGI,MAAO,CACNM,UAAW,EACXC,QAAS,KAERR,KA0BFS,UApBA,WACX,OACI,kBAAC,IAAD,CACIC,MAAK,YAULC,OAAQ,SAAAf,GAAI,OAAI,kBAACD,EAAD,CAAqBC,KAAMA,KAX/C,W,yKC3BR,8FAmCac,EAAK,WAkBHE,UAhDA,SAAC,GAAc,IAClBC,EADiB,EAAXjB,KACSkB,kBAAfD,MAER,OADAE,QAAQC,IAAIH,GAER,6BACI,kBAAC,UAAD,MACA,yBAAKZ,MAAO,CACPC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,WAAY,WAEZQ,EAAMI,KAAI,SAAAC,GAAQ,IACPC,EAAgBD,EAAIE,KAApBD,YACR,OACI,yBAAKE,IAAMF,EAAYG,KACnBrB,MAAO,CAAEK,aAAc,SACvB,kBAAC,IAAD,CAAMiB,GAAIJ,EAAYG,MAChBH,EAAYtB,WAK7B,6BACG,kBAAC,IAAD,CAAM0B,GAAG,SAAT,sB,kCC7BpB,wIAcyBC,QAAOC,QAdhC,IAgBMC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiBlC,EAAuB,EAAvBA,KAAMc,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzDoB,EAAYnC,EACdA,EAAKA,KACLkC,EAAgBpB,IAAUoB,EAAgBpB,GAAOd,KAErD,OACE,kBAAC,IAAMoC,SAAP,KACGD,GAAapB,EAAOoB,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAC,GAAU,IACpBtC,EAAkCsC,EAAlCtC,KAAMc,EAA4BwB,EAA5BxB,MAAOC,EAAqBuB,EAArBvB,OAAQwB,EAAaD,EAAbC,SAE7B,OACE,kBAACT,EAAmBU,SAApB,MACG,SAAAN,GAAe,OACd,kBAACD,EAAD,CACEjC,KAAMA,EACNc,MAAOA,EACPC,OAAQA,GAAUwB,EAClBL,gBAAiBA,S,qBCzC3B,IAAsBO,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEjB,IAAMkB,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-eae1298a80e731f62235.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst TitleAndDescription = ({data}) => {\n    const title = data.site.siteMetadata.title\n    const description = data.site.siteMetadata.description\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            fontFamily: 'avenir'\n        }}>\n            <h2 style={{marginBottom: 0 }}>{title}</h2>\n            <p style={{ \n                marginTop: 0,\n                opacity: .5\n            }}>\n                {description}\n            </p>\n        </div>\n    )\n}\n\nconst Header = () => {\n    return (\n        <StaticQuery \n            query={graphql`\n                query {\n                    site {\n                        siteMetadata {\n                            title\n                            description\n                        }\n                    }\n                }\n            `}\n            render={data => <TitleAndDescription data={data} />\n            }\n        />\n    )\n   \n}\n\nexport default Header\n","import React from \"react\"\nimport { graphql, Link } from 'gatsby'\nimport Header from '../pages/components/Header'\n\n\nconst Layout = ({ data }) => {\n    const { edges } = data.allMarkdownRemark\n    console.log(edges)\n    return (\n        <div>\n            <Header />\n            <div style={{\n                 display: 'flex',\n                 flexDirection: 'column',\n                 alignItems: 'center',\n                 fontFamily: 'avenir'\n            }}>\n                {edges.map(edg => {\n                    const { frontmatter } = edg.node\n                    return (\n                        <div key={ frontmatter.path } \n                            style={{ marginBottom: '1rem' }}>\n                            <Link to={frontmatter.path} >\n                                { frontmatter.title }\n                            </Link>\n                        </div>\n                    )\n                })}\n                 <div>\n                    <Link to='/tags'>Browse by tag</Link>\n                 </div>\n            </div>\n        </div>)\n}\n\nexport const query = graphql `\n    query HomepageQuery {\n        allMarkdownRemark (\n            sort: {order: DESC, fields: [frontmatter___date]}\n        ){\n            edges {\n                node {\n                    frontmatter {\n                        title\n                        path\n                        date\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}